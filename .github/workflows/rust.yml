name: Test and Build Rust

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - uses: actions/checkout@v4
      - run: cargo fmt --check --verbose

  clippy:
    name: Clippy ${{ matrix.toolchain }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ (matrix.toolchain == 'beta') || (matrix.toolchain == 'nightly') }}
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - beta
          - nightly
    env:
      RUSTFLAGS: --deny warnings
    steps:
      - name: Setup Rust
        id: rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy
      - uses: actions/checkout@v4
      - run: cargo fetch
      - uses: actions/cache@v4
        with:
          key: clippy-${{ steps.rust.outputs.cachekey }}-${{ hashFiles('**/Cargo.*') }}
          path: target/
      - run: cargo clippy --offline --all-targets
      - run: cargo doc --offline --no-deps

  release:
    name: Release ${{ matrix.triple }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - triple: arm-unknown-linux-gnueabihf
            os: ubuntu-latest
    env:
      RUSTFLAGS: --deny warnings
    steps:
      - name: Setup Rust
        id: rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.triple }}

      - name: Install cargo tools
        if: runner.os == 'Linux'
        uses: taiki-e/install-action@v2
        with:
          tool: cross,cargo-deb

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set artifact name
        shell: bash
        run: |
          version="$(git describe --tags --match "v*.*.*" --always)"
          echo "version: $version"
          echo "GIT_TAG_VERSION=$version" >> $GITHUB_ENV

          name="websocket-ledmatrix-snake-$version-${{ matrix.triple }}"
          echo "artifact: $name"
          echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV

      - run: cargo fetch --locked
      - uses: actions/cache@v4
        with:
          key: release-${{ matrix.triple }}-${{ steps.rust.outputs.cachekey }}-${{ hashFiles('**/Cargo.*') }}
          path: target/

      - name: Build
        run: ${{ runner.os == 'Linux' && 'cross' || 'cargo' }} build --release --offline --target ${{ matrix.triple }}

      - name: Package deb
        if: runner.os == 'Linux'
        run: cargo deb --no-build --no-strip --target ${{ matrix.triple }} --output ${{ env.ARTIFACT_NAME }}.deb

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.triple }}
          path: |
            *.deb
            *.rpm
            *.tar.gz
            *.zip
